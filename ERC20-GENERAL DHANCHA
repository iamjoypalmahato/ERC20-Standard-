// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// EIP-20: ERC-20 Token Standard
// https://eips.ethereum.org/EIPS/eip-20

interface ERC20Interface {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function transfer (address to, uint tokens) external returns (bool success);

    function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function approve(address spender, uint tokens) external returns (bool success);
    function transferFrom(address from, address to, uint tokens) external returns (bool success);

    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);

}
/*token name here  -joypal */
contract TokenName  is ERC20Interface{
    string public name="TokenName";
    string public symbol="TN";

    uint public decimals=0; /*give the decimal -joypal */
    uint  public override totalSupply;
    address public founder;
    mapping(address=>uint) public balances;
    mapping(address=>mapping(address=>uint)) public allowed;

    constructor(){
        totalSupply=1000; /*supply here -joypal */
        founder=msg.sender;
        balances[founder]=totalSupply;
    }

    function balanceOf(address tokenOwner) external view override returns (uint balance){
        return balances[tokenOwner];
    }

    function transfer (address to, uint tokens) external override returns (bool success){
        require(balances[msg.sender]>=tokens,"You don't have sufficient balance");
        balances[to]=balances[to]+tokens;
        balances[msg.sender]=balances[msg.sender]-tokens;
        emit Transfer(msg.sender,to,tokens);
        return true;
    }

    function allowance(address tokenOwner, address spender) external view override returns (uint remaining){
        return allowed[tokenOwner][spender];
    }
    
    function approve(address spender, uint tokens) external override returns (bool success){
        require(balances[msg.sender]>=tokens,"You have insufficient balance");
        require(tokens>0);
        allowed[msg.sender][spender]=tokens;
        emit Approval(msg.sender,spender,tokens);
        return true;
    }

    function transferFrom(address from, address to, uint tokens) external override returns (bool success){
        require(allowed[from][to]>=tokens);
        require(balances[from]>=tokens);
        balances[from]=balances[from]-tokens;
        balances[to]=balances[to]+tokens;
        return true;
    }
    
}

